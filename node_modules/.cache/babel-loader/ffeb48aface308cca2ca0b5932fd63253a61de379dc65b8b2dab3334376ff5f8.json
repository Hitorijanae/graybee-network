{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\j_b_l\\\\graybee-network\\\\src\\\\components\\\\RegistrationUploaderComponent.js\";\nimport React from 'react';\nimport $ from 'jquery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass RegistrationUploaderComponent extends React.Component {\n  previewPicture(input) {\n    if (input.target.files) {\n      const canvas = document.getElementById(\"pictureCanvas\"); // Get the canvas\n\n      const ctx = canvas.getContext(\"2d\");\n      const img = input.target.files[0];\n      const reader = new FileReader(); // Create a file reader\n\n      reader.readAsDataURL(img);\n      reader.onloadend = function (e) {\n        // When the reader is done\n\n        const image = new Image();\n        image.src = e.target.result;\n        image.onload = function () {\n          console.log(\"height: \" + image.height + \"width: \" + image.width);\n          ctx.width = image.width * 0.5; // Set the canvas to half the size of the image\n\n          ctx.height = image.height * 0.5; // Set the canvas to half the size of the image\n\n          ctx.drawImage(image, 0, 0, 500, 500); // Draw the image to the canvas\n        };\n      };\n    }\n  }\n\n  uploadProfilePic(e) {\n    e.preventDefault();\n\n    // const canvas = document.getElementById( \"pictureCanvas\" );\n\n    const formDatum = new FormData(document.getElementById(\"pictureForm\"));\n    formDatum.append(\"opcode\", 2);\n    fetch(\"http://localhost/php/login.php\", {\n      method: \"POSt\",\n      body: formDatum\n    }).then(function (response) {\n      if (response.ok) {\n        console.log(\"Picture uploaded!\");\n        window.location.href = \"http://localhost:3000/tags.htm\";\n      } else {\n        console.log(response);\n      }\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"pictureForm\",\n      onSubmit: this.uploadProfilePic,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"pictureCanvas\",\n        width: \"500px\",\n        height: \"500px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: this.previewPicture,\n        type: \"file\",\n        accept: \"image/*\",\n        id: \"picPicker\",\n        name: \"picPicker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        placeholder: \"Upload!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default RegistrationUploaderComponent;","map":{"version":3,"names":["React","$","RegistrationUploaderComponent","Component","previewPicture","input","target","files","canvas","document","getElementById","ctx","getContext","img","reader","FileReader","readAsDataURL","onloadend","e","image","Image","src","result","onload","console","log","height","width","drawImage","uploadProfilePic","preventDefault","formDatum","FormData","append","fetch","method","body","then","response","ok","window","location","href","render"],"sources":["C:/Users/j_b_l/graybee-network/src/components/RegistrationUploaderComponent.js"],"sourcesContent":["import React from 'react';\r\nimport $ from 'jquery';\r\n\r\nclass RegistrationUploaderComponent extends React.Component {\r\n    previewPicture( input ) {\r\n\r\n        if ( input.target.files ) {\r\n      \r\n          const canvas = document.getElementById( \"pictureCanvas\" ); // Get the canvas\r\n      \r\n          const ctx = canvas.getContext( \"2d\" );\r\n      \r\n          const img = input.target.files[ 0 ];\r\n      \r\n          const reader = new FileReader(); // Create a file reader\r\n      \r\n          reader.readAsDataURL( img );\r\n      \r\n          reader.onloadend = function( e ) { // When the reader is done\r\n      \r\n            const image = new Image();\r\n      \r\n            image.src = e.target.result;\r\n      \r\n            image.onload = function() {\r\n      \r\n              console.log( \"height: \" + image.height + \"width: \" + image.width );\r\n      \r\n              ctx.width = image.width * 0.5; // Set the canvas to half the size of the image\r\n      \r\n              ctx.height = image.height * 0.5; // Set the canvas to half the size of the image\r\n      \r\n              ctx.drawImage( image, 0, 0, 500, 500 ); // Draw the image to the canvas\r\n      \r\n            };\r\n      \r\n          };\r\n      \r\n        }\r\n      \r\n      }\r\n    uploadProfilePic(e) {\r\n        e.preventDefault();\r\n\r\n        // const canvas = document.getElementById( \"pictureCanvas\" );\r\n      \r\n        const formDatum = new FormData( document.getElementById( \"pictureForm\" ) );\r\n      \r\n        formDatum.append( \"opcode\", 2 );\r\n\r\n        fetch( \"http://localhost/php/login.php\", {\r\n            method : \"POSt\",\r\n            body : formDatum\r\n        }).then( function( response ) {\r\n            if( response.ok ) {\r\n                console.log( \"Picture uploaded!\" );\r\n                window.location.href=\"http://localhost:3000/tags.htm\";\r\n            }\r\n            else{\r\n                console.log(response);\r\n            }\r\n        });\r\n    }\r\n      \r\n\r\n    render(){\r\n        return(\r\n            <form id=\"pictureForm\" onSubmit={this.uploadProfilePic}>\r\n                <canvas id=\"pictureCanvas\" width=\"500px\" height=\"500px\"></canvas>\r\n                <input onChange={this.previewPicture} type=\"file\" accept=\"image/*\" id=\"picPicker\" name=\"picPicker\" />\r\n                <input type=\"submit\" placeholder=\"Upload!\"/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default RegistrationUploaderComponent;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,CAAC,MAAM,QAAQ;AAAC;AAEvB,MAAMC,6BAA6B,SAASF,KAAK,CAACG,SAAS,CAAC;EACxDC,cAAc,CAAEC,KAAK,EAAG;IAEpB,IAAKA,KAAK,CAACC,MAAM,CAACC,KAAK,EAAG;MAExB,MAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAAE,eAAe,CAAE,CAAC,CAAC;;MAE3D,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAE,IAAI,CAAE;MAErC,MAAMC,GAAG,GAAGR,KAAK,CAACC,MAAM,CAACC,KAAK,CAAE,CAAC,CAAE;MAEnC,MAAMO,MAAM,GAAG,IAAIC,UAAU,EAAE,CAAC,CAAC;;MAEjCD,MAAM,CAACE,aAAa,CAAEH,GAAG,CAAE;MAE3BC,MAAM,CAACG,SAAS,GAAG,UAAUC,CAAC,EAAG;QAAE;;QAEjC,MAAMC,KAAK,GAAG,IAAIC,KAAK,EAAE;QAEzBD,KAAK,CAACE,GAAG,GAAGH,CAAC,CAACZ,MAAM,CAACgB,MAAM;QAE3BH,KAAK,CAACI,MAAM,GAAG,YAAW;UAExBC,OAAO,CAACC,GAAG,CAAE,UAAU,GAAGN,KAAK,CAACO,MAAM,GAAG,SAAS,GAAGP,KAAK,CAACQ,KAAK,CAAE;UAElEhB,GAAG,CAACgB,KAAK,GAAGR,KAAK,CAACQ,KAAK,GAAG,GAAG,CAAC,CAAC;;UAE/BhB,GAAG,CAACe,MAAM,GAAGP,KAAK,CAACO,MAAM,GAAG,GAAG,CAAC,CAAC;;UAEjCf,GAAG,CAACiB,SAAS,CAAET,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAE,CAAC,CAAC;QAE1C,CAAC;MAEH,CAAC;IAEH;EAEF;;EACFU,gBAAgB,CAACX,CAAC,EAAE;IAChBA,CAAC,CAACY,cAAc,EAAE;;IAElB;;IAEA,MAAMC,SAAS,GAAG,IAAIC,QAAQ,CAAEvB,QAAQ,CAACC,cAAc,CAAE,aAAa,CAAE,CAAE;IAE1EqB,SAAS,CAACE,MAAM,CAAE,QAAQ,EAAE,CAAC,CAAE;IAE/BC,KAAK,CAAE,gCAAgC,EAAE;MACrCC,MAAM,EAAG,MAAM;MACfC,IAAI,EAAGL;IACX,CAAC,CAAC,CAACM,IAAI,CAAE,UAAUC,QAAQ,EAAG;MAC1B,IAAIA,QAAQ,CAACC,EAAE,EAAG;QACdf,OAAO,CAACC,GAAG,CAAE,mBAAmB,CAAE;QAClCe,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,gCAAgC;MACzD,CAAC,MACG;QACAlB,OAAO,CAACC,GAAG,CAACa,QAAQ,CAAC;MACzB;IACJ,CAAC,CAAC;EACN;EAGAK,MAAM,GAAE;IACJ,oBACI;MAAM,EAAE,EAAC,aAAa;MAAC,QAAQ,EAAE,IAAI,CAACd,gBAAiB;MAAA,wBACnD;QAAQ,EAAE,EAAC,eAAe;QAAC,KAAK,EAAC,OAAO;QAAC,MAAM,EAAC;MAAO;QAAA;QAAA;QAAA;MAAA,QAAU,eACjE;QAAO,QAAQ,EAAE,IAAI,CAACzB,cAAe;QAAC,IAAI,EAAC,MAAM;QAAC,MAAM,EAAC,SAAS;QAAC,EAAE,EAAC,WAAW;QAAC,IAAI,EAAC;MAAW;QAAA;QAAA;QAAA;MAAA,QAAG,eACrG;QAAO,IAAI,EAAC,QAAQ;QAAC,WAAW,EAAC;MAAS;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QACzC;EAEf;AACJ;AACA,eAAeF,6BAA6B"},"metadata":{},"sourceType":"module","externalDependencies":[]}